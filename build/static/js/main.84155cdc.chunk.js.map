{"version":3,"sources":["assets/imgs/logo.png","components/NavBarX.jsx","common/Constants.js","common/DrawUtil.js","common/Util.js","views/Signup.jsx","views/Login.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBarX","state","page","props","getActiveLabelBold","activeLabel","Navbar","bg","expand","src","logo","width","height","alt","Brand","href","style","fontFamily","fontSize","color","Toggle","Collapse","id","Nav","className","Link","this","Component","constants","regex","RegExp","errors","INVALID_FIRSTNAME_LASTNAME","INVALID_USERNAME_OR_PASSWORD","PASSWORD_MATCH","errorMessageTimeout","fireStore","apiIdentifier","bw","DrawUtil","drawGrids","canvas","context","getContext","ctx","clientWidth","clientHeight","x","moveTo","lineTo","bh","strokeStyle","stroke","clearGrids","clearRect","drawPoints","e","coordinatesSize","count","document","querySelector","rect","getBoundingClientRect","pos","clientX","left","y","clientY","top","beginPath","arc","Math","PI","h","s","l","fillStyle","fill","drawPointsByCoord","radius","hsl","axios","require","Utilities","getImageBg","imgId","a","config","method","url","then","response","background","backgroundSize","catch","error","Signup","firstName","lastName","userName","pwd","confpwd","errorShow","errorMessage","toggleForm","showGrids","progress","progressvariant","imgRetrieved","coordinates","progressVariants","componentDidMount","getPointerEvents","preventDefault","gridX","gridY","window","PointerEvent","addEventListener","passive","length","alert","floor","layerX","layerY","push","setState","console","log","draw","updateImage","actionImgRetrieval","handleImageSubmit","toggleGrids","handleSubmit","trim","test","showError","setTimeout","display","Card","Alert","variant","Form","onSubmit","Row","Group","controlId","Label","Control","required","type","placeholder","onChange","target","value","defaultValue","Feedback","minLength","InputGroup","hasValidation","Text","Button","onClick","border","title","ProgressBar","animated","now","Login","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.84155cdc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.05dab920.png\";","import React, { Component } from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport logo from \"../assets/imgs/logo.png\";\r\n\r\nclass NavBarX extends Component {\r\n    state = { page: this.props.page };\r\n\r\n    getActiveLabelBold = (activeLabel) => {\r\n        return `font-weight-${this.state.page === activeLabel ? \"bold\" : \"normal\"}`;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar bg=\"light\" expand=\"md\">\r\n                    <img src={logo} width=\"80\" height=\"50\" alt=\"\" />\r\n                    <Navbar.Brand\r\n                        href=\"/\"\r\n                        style={{\r\n                            fontFamily: \"Exo\",\r\n                            fontSize: \"XX-Large\",\r\n                            color: \"#2b2b2a\",\r\n                        }}\r\n                    >\r\n                        GAuth\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link\r\n                                className={this.getActiveLabelBold(\"Home\")}\r\n                                href=\"/\"\r\n                            >\r\n                                Home\r\n                            </Nav.Link>\r\n                            <Nav.Link\r\n                                href=\"/login\"\r\n                                className={this.getActiveLabelBold(\"Api\")}\r\n                            >\r\n                                LogIn\r\n                            </Nav.Link>\r\n\r\n                            <Nav.Link\r\n                                href=\"/signup\"\r\n                                className={this.getActiveLabelBold(\"SignUp\")}\r\n                            >\r\n                                SignUp\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBarX;","const constants = {\r\n    regex: new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,20})\"),\r\n    errors: {\r\n        INVALID_FIRSTNAME_LASTNAME: \"FirstName and LastName can't be empty\",\r\n        INVALID_USERNAME_OR_PASSWORD: \"Username and Password should be atlest 8 to 20 characters long and must contain one uppercase, lowercase, digit and a special character\",        \r\n        PASSWORD_MATCH: \"Passwords doesn't match\"\r\n    },\r\n    errorMessageTimeout: 3000,\r\n    fireStore: \"https://firebasestorage.googleapis.com/v0/b/gauth-x.appspot.com/o/image.jpg?alt=media\",\r\n    apiIdentifier: \"https://gauth-server.herokuapp.com/api\"    \r\n}\r\nexport default constants","var bw = 1000;\r\nvar bh = 600;\r\nvar p = 0;\r\nvar cw = bw + (p * 2) + 1;\r\nvar ch = bh + (p * 2) + 1;\r\n\r\nvar DrawUtil = {\r\n    drawGrids: (canvas, color) => {\r\n        var context = canvas.getContext(\"2d\");\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.canvas.width = ctx.canvas.clientWidth;\r\n        ctx.canvas.height = ctx.canvas.clientHeight;        \r\n        for (var x = 0; x <= bw; x += 50) {\r\n            context.moveTo(0.5 + x + p, p);\r\n            context.lineTo(0.5 + x + p, bh + p);\r\n        }\r\n\r\n        for (x = 0; x <= bh; x += 50) {\r\n            context.moveTo(p, 0.5 + x + p);\r\n            context.lineTo(bw + p, 0.5 + x + p);\r\n        }\r\n        context.strokeStyle = color;\r\n        context.stroke();\r\n    },\r\n    clearGrids: (canvas) => {\r\n        var context = canvas.getContext(\"2d\");\r\n        context.clearRect(0, 0, cw, ch);\r\n    },\r\n    drawPoints: (e, coordinatesSize) => {\r\n        if(coordinatesSize >= 5){\r\n            return\r\n        }\r\n        let count = 0;\r\n        const canvas = document.querySelector('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const rect = canvas.getBoundingClientRect();\r\n        const pos = {\r\n            x: (e.clientX - rect.left) * canvas.width / canvas.clientWidth,\r\n            y: (e.clientY - rect.top) * canvas.height / canvas.clientHeight,\r\n        };        \r\n        ctx.beginPath();\r\n        ctx.arc(pos.x, pos.y, 1, 0, Math.PI * 2);\r\n        let hsl = (h, s, l) => {\r\n            return `hsl(${h * 360 | 0},${s * 100 | 0}%,${l * 100 | 0}%)`;\r\n        }\r\n        ctx.fillStyle = hsl((count++ % 100) / 100, 1, 0.5);\r\n        ctx.fill();\r\n    },\r\n    drawPointsByCoord: (coordinatesSize, x, y,  radius = 0.5) => {\r\n        if(coordinatesSize >= 5){\r\n            return\r\n        }\r\n        let count = 0;\r\n        const canvas = document.querySelector('canvas');\r\n        const ctx = canvas.getContext('2d');              \r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\r\n        let hsl = (h, s, l) => {\r\n            return `hsl(${h * 360 | 0},${s * 100 | 0}%,${l * 100 | 0}%)`;\r\n        }\r\n        ctx.fillStyle = hsl((count++ % 100) / 100, 1, 0.5);\r\n        ctx.fill();\r\n    }\r\n}\r\nexport default DrawUtil;","import constants from \"./Constants\";\r\nvar axios = require('axios');\r\n\r\nconst Utilities = {\r\n    getImageBg: async (canvas, imgId) => {\r\n        var config = {\r\n            method: 'POST',\r\n            url: constants.apiIdentifier + \"/getImage/\" + imgId\r\n        };            \r\n        await axios(config)\r\n            .then(function (response) {                                           \r\n                canvas.style.background = 'url(' + response['data']['image'] + ') no-repeat center center';\r\n                canvas.style.backgroundSize= \"cover\";                \r\n            })\r\n            .catch(function (error) {\r\n                canvas.style.background = 'url(https://firebasestorage.googleapis.com/v0/b/gauth-x.appspot.com/o/imgError.png?alt=media) no-repeat center center';\r\n                canvas.style.backgroundSize= \"cover\";\r\n            });                \r\n    }\r\n}\r\nexport default Utilities","import React, { Component } from \"react\";\r\nimport { Form, Row, InputGroup, Button, Card, Alert, ProgressBar } from \"react-bootstrap\";\r\nimport constants from \"../common/Constants\";\r\nimport DrawUtil from \"../common/DrawUtil\";\r\nimport Utilities from \"../common/Util\";\r\n\r\nclass Signup extends Component {\r\n    state = {\r\n        page: this.props.page,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        userName: \"\",\r\n        pwd: \"\",\r\n        confpwd: \"\",\r\n        errorShow: false,\r\n        errorMessage: \"\",\r\n        toggleForm: true,\r\n        showGrids: false,\r\n        progress: 0,\r\n        progressvariant: \"secondary\",\r\n        imgRetrieved: false\r\n    };\r\n    regex = constants.regex;\r\n    imgId = 4;\r\n    coordinates = [];\r\n    progressVariants = {\r\n        20 : \"danger\",\r\n        40 : \"warning\",\r\n        60 : \"secondary\",\r\n        80 : \"info\",\r\n        100 : \"success\"\r\n    }\r\n    componentDidMount = () => {        \r\n        const canvas = document.querySelector('canvas');\r\n        Utilities.getImageBg(canvas, this.imgId);\r\n        this.getPointerEvents(canvas);\r\n    }\r\n\r\n    getPointerEvents = (canvas) => {\r\n        function preventDefault(e) {\r\n            e.preventDefault();\r\n        }        \r\n        var gridX = 0;\r\n        var gridY = 0;\r\n        if (window.PointerEvent) {            \r\n            canvas.addEventListener('touchstart', preventDefault, { passive: false });\r\n            canvas.addEventListener('touchmove', preventDefault, { passive: false });\r\n            canvas.addEventListener('click', (e) => {\r\n                // if (toggle === 0) {\r\n                //     toggle = 1;\r\n                //     gridX = Math.floor(e.layerX / 50) + 1;\r\n                //     gridY = Math.floor(e.layerY / 50) + 1;\r\n                // } else {\r\n                //     toggle = 0;\r\n                //     console.log(gridX, gridY);\r\n                //     console.log(gridX === Math.floor(e.layerX / 50) + 1 && gridY === Math.floor(e.layerY / 50) + 1);\r\n                // }\r\n                if(this.coordinates.length >= 5){\r\n                    alert(\"Only 5 points can be selected, you've selected 5 points already, please submit to continue.\")    \r\n                    return;\r\n                }\r\n                gridX = Math.floor(e.layerX / 50) + 1;\r\n                gridY = Math.floor(e.layerY / 50) + 1;\r\n                this.coordinates.push([gridX, gridY]);\r\n                this.setState({progress: this.state.progress+20, progressvariant: this.progressVariants[this.state.progress+20]});\r\n                console.log(this.coordinates);                \r\n            });\r\n            canvas.addEventListener('mousedown', (e) => {                \r\n                    DrawUtil.drawPoints(e, this.coordinates.length)                \r\n            });\r\n        } else {\r\n            canvas.addEventListener('mousemove', this.draw);\r\n            canvas.addEventListener('mousedown', preventDefault);\r\n        }\r\n    }    \r\n\r\n    updateImage = () => {\r\n        this.setState({progress: 0});\r\n        this.coordinates = [];\r\n        const canvas = document.querySelector('canvas');\r\n        Utilities.getImageBg(canvas, ++this.imgId);\r\n    }\r\n\r\n    actionImgRetrieval = (imgRetrieved) => {        \r\n        this.setState({imgRetrieved : imgRetrieved}, () => {\r\n            console.log(imgRetrieved);\r\n        });        \r\n    }\r\n\r\n    handleImageSubmit = () => {\r\n        console.log(this.coordinates.length);\r\n        console.log(this.state.progress);\r\n    }\r\n\r\n    toggleGrids = (color) => {\r\n        const canvas = document.querySelector('canvas');\r\n        if(this.state.showGrids) this.clearGrids();\r\n        else this.drawGrids(color)        \r\n    }\r\n\r\n    clearGrids = () => {\r\n        const canvas = document.querySelector('canvas');\r\n        DrawUtil.clearGrids(canvas);\r\n        this.setState({showGrids: false})\r\n    }\r\n\r\n    drawGrids = (color) => {\r\n        const canvas = document.querySelector('canvas');\r\n        DrawUtil.drawGrids(canvas, color);\r\n        this.setState({showGrids: true})\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        if (this.state.firstName.trim() === \"\" || this.state.lastName.trim() === \"\") {\r\n            this.showError(constants.errors.INVALID_FIRSTNAME_LASTNAME);\r\n            return;\r\n        }\r\n        if (!this.regex.test(this.state.userName) || !this.regex.test(this.state.pwd)) {\r\n            this.showError(constants.errors.INVALID_USERNAME_OR_PASSWORD);\r\n            return;\r\n        }        \r\n        if (this.state.pwd !== this.state.confpwd) {\r\n            this.showError(constants.errors.PASSWORD_MATCH);\r\n            return;\r\n        }\r\n        this.setState({toggleForm: true})\r\n    };\r\n\r\n    showError = (errorMessage) => {\r\n        this.setState({ errorMessage: errorMessage, errorShow: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ errorShow: false });\r\n            }, constants.errorMessageTimeout)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container pt-4 pb-5\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-6 col-md-8 col-12\" style={{ display: this.state.toggleForm ? \"none\" : \"block\" }}>\r\n                        <Card>\r\n                            <Alert\r\n                                style={{ display: this.state.errorShow ? \"block\" : \"none\" }}\r\n                                variant={\"danger\"}>\r\n                                {this.state.errorMessage}\r\n                            </Alert>\r\n                            <Form onSubmit={this.handleSubmit} >\r\n                                <Row className=\"mb-3 p-xl-5 p-lg-5 p-md-5 p-sm-5 p-0\">\r\n                                    <Form.Group className=\"pb-3\" controlId=\"validationCustom01\">\r\n                                        <Form.Label>First name</Form.Label>\r\n                                        <Form.Control\r\n                                            required\r\n                                            type=\"text\"\r\n                                            placeholder=\"First name\"\r\n                                            onChange={(e) => {\r\n                                                this.setState({ firstName: e.target.value })\r\n                                            }}\r\n                                            defaultValue=\"\"\r\n                                        />\r\n                                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"pb-3\" controlId=\"validationCustom02\">\r\n                                        <Form.Label>Last name</Form.Label>\r\n                                        <Form.Control\r\n                                            required\r\n                                            type=\"text\"\r\n                                            minLength={2}\r\n                                            placeholder=\"Last name\"\r\n                                            onChange={(e) => {\r\n                                                this.setState({ lastName: e.target.value })\r\n                                            }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"pb-3\" controlId=\"validationCustomUsername\">\r\n                                        <Form.Label>Username</Form.Label>\r\n                                        <InputGroup hasValidation>\r\n                                            <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                placeholder=\"John@123\"\r\n                                                aria-describedby=\"inputGroupPrepend\"\r\n                                                onChange={(e) => {\r\n                                                    this.setState({ userName: e.target.value })\r\n                                                }}\r\n                                                minLength=\"10\"\r\n                                                required\r\n                                            />\r\n                                        </InputGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"pb-3\" controlId=\"validationPassword\">\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <InputGroup hasValidation>\r\n                                            <Form.Control\r\n                                                type=\"password\"\r\n                                                placeholder=\"Password\"\r\n                                                aria-describedby=\"inputGroupPrepend\"\r\n                                                onChange={(e) => {\r\n                                                    this.setState({ pwd: e.target.value })\r\n                                                }}\r\n                                                minLength={10}\r\n                                                required\r\n                                            />\r\n                                        </InputGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"pb-3\" controlId=\"validationPassword2\">\r\n                                        <Form.Label>Confirm Password</Form.Label>\r\n                                        <InputGroup hasValidation>\r\n                                            <Form.Control\r\n                                                type=\"password\"\r\n                                                placeholder=\"Confirm Password\"\r\n                                                aria-describedby=\"inputGroupPrepend\"\r\n                                                onChange={(e) => {\r\n                                                    this.setState({ confpwd: e.target.value })\r\n                                                }}\r\n                                                minLength={10}\r\n                                                required\r\n                                            />\r\n                                        </InputGroup>\r\n                                    </Form.Group>\r\n                                </Row>\r\n                                <Button className=\"mb-5\" onClick={this.handleSubmit}>Submit</Button>\r\n                            </Form>\r\n                        </Card>\r\n                    </div>\r\n                </div>                \r\n                \r\n                <center style={{display: this.state.toggleForm ? \"block\" : \"none\"}}>\r\n                    <canvas className=\"row justify-content-center\" style={{                    \r\n                        width: \"1001px\",\r\n                        height: \"601px\",                        \r\n                        border: \"1px solid black\"                        \r\n                    }}></canvas>\r\n                    <div className=\"row pt-4 justify-content-center\">\r\n                        <div className=\"col-2 pt-1\">\r\n                            <Button variant=\"primary\" onClick={() => {this.toggleGrids(\"grey\")}}>\r\n                                {this.state.showGrids ? \"Hide\" : \"Show\"} Grids\r\n                            </Button>                            \r\n                            <div className=\"pt-2\" style={{display: this.state.showGrids ? \"block\" : \"none\"}}>\r\n                                <input onChange={(e) => {this.drawGrids(e.target.value)}} title=\"Grid Color\" type=\"color\"></input>                            \r\n                            </div>\r\n                        </div>       \r\n                        <div className=\"col-2 pt-1\">\r\n                            <Button variant=\"secondary\" onClick={this.updateImage}>\r\n                                Next Image\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"col-2 pb-2\">\r\n                            Points Selection {this.state.progress}%\r\n                            <ProgressBar animated variant={this.state.progressvariant} now={this.state.progress} />                            \r\n                        </div>\r\n                        <div className=\"col-2 pt-1\">\r\n                            <Button variant=\"warning\" onClick={() => {this.setState({progress: 0});this.coordinates=[];this.clearGrids()}}>\r\n                                Clear\r\n                            </Button>\r\n                        </div>                        \r\n                        <div className=\"col-2 pt-1\">\r\n                            <Button variant=\"success\" onClick={this.handleImageSubmit}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </center>\r\n                               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;","import React, { Component } from \"react\";\r\n\r\nclass Login extends Component {\r\n    state = { page: this.props.page };\r\n\r\n    getActiveLabelBold = (activeLabel) => {\r\n        return `font-weight-${this.state.page === activeLabel ? \"bold\" : \"normal\"}`;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Signin\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import './App.css';\nimport NavBarX from './components/NavBarX';\nimport Signup from './views/Signup';\nimport Login from './views/Login';\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    < Router >\n      <div className=\"App\" >\n        <NavBarX page=\"home\" />\n        <Route exact path=\"/\" >\n          vrushank\n          {/* <WelcomeView /> */}\n        </Route>\n        <Route path=\"/login\" >\n          <Login />\n          {/* <AboutView /> */}\n        </Route>\n        <Route path=\"/signup\" >\n          <Signup />\n          {/* <Api /> */}\n        </Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}